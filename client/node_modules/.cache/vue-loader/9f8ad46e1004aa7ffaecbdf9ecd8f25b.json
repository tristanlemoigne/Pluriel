{"remainingRequest":"/Users/tlemoigne/Desktop/Pluriel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tlemoigne/Desktop/Pluriel/client/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tlemoigne/Desktop/Pluriel/client/src/App.vue","mtime":1559148640782},{"path":"/Users/tlemoigne/Desktop/Pluriel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tlemoigne/Desktop/Pluriel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport socket from \"./socket.js\"\nimport { bus } from \"@/main\"\nimport { findIp } from \"./utils\"\nimport { checkIfMobile } from \"./utils\"\nimport experienceSteps from \"../../server/experienceSteps.js\" // this is reference a file outside client folder, so it's the same as the server's\n\nimport DebugUIHelpers from \"./components/DebugUIHelpers\"\nimport ThreeContainerDsk from \"./components/ThreeContainer/ThreeContainerDsk.vue\"\nimport ThreeContainerMob from \"./components/ThreeContainer/ThreeContainerMob.vue\"\nimport { threeBus } from \"@/main\"\n\nexport default {\n    name: \"app\",\n    components: { DebugUIHelpers, ThreeContainerDsk, ThreeContainerMob },\n    data() {\n        return {\n            socket: socket,\n            roomState: {\n                currentStep: experienceSteps[0],\n                lamar: undefined,\n                zanit: undefined\n            },\n            users: Array(3),\n            myCharacter: null,\n            roomId: \"\",\n            isMobile: checkIfMobile(),\n            isAudioActive: true\n        }\n    },\n    mounted() {\n        // Listen for server events\n        socket.on(\"joined room\", this.showRoom)\n        socket.on(\"cant join room\", this.showCantJoin)\n        socket.on(\"update users\", users => this.setUsersData(users))\n        socket.on(\"set user room state\", newRoomState =>\n            this.setOwnState(newRoomState)\n        )\n\n        bus.$on(\"setRoomState\", this.setRoomState)\n    },\n    methods: {\n        userCreateRoom() {\n            socket.emit(\"create room\", this.$data.isMobile)\n        },\n        userJoinRoom(requestedRoom) {\n            socket.emit(\"join room\", {\n                isMobile: this.$data.isMobile,\n                requestedRoom\n            })\n        },\n        showRoom(roomId) {\n            this.$router.push({ name: \"room\" })\n            this.$data.roomId = roomId\n        },\n        showCantJoin(roomId) {\n            console.error(`La salle ${roomId} demandée n'existe pas`)\n        },\n        setRoomState(changedState) {\n            socket.emit(\"set server room state\", changedState)\n        },\n        setOwnState(roomState) {\n            this.$data.roomState = roomState\n        },\n        setUsersData(newUsers) {\n            this.$data.users = newUsers\n\n            if (typeof this.$data.users[0] !== \"undefined\") {\n                const user = this.$data.users.find(\n                    user => user.id === socket.id\n                )\n            }\n        },\n        toggleAudio() {\n            this.$data.isAudioActive = !this.$data.isAudioActive\n        }\n    },\n    watch: {\n        roomState: function(roomState) {\n            if (roomState.currentStep.name.slice(0, 4) === \"room\") {\n                this.$router.push({ name: \"room\" })\n            }\n            if (roomState.currentStep.name === \"selection_perso\") {\n                this.$router.push({ name: \"selectionPersos\" })\n            }\n            if (roomState.currentStep.name === \"dioramas\") {\n                this.$router.push({ name: \"dioramas\" })\n            }\n            if (roomState.currentStep.name === \"tuto_interactif\") {\n                this.$router.push({ name: \"tutoInteractif\" })\n            }\n            if (roomState.currentStep.name === \"trial_1_intro\") {\n                this.$router.push({ name: \"experience\" })\n            }\n        },\n        users: function() {\n            const user = this.$data.users.find(user => user.id === socket.id)\n            this.$data.myCharacter = user.character\n        }\n    }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app\">\n        <transition name=\"fade\">\n            <router-view\n                class=\"page\"\n                :isMobile=\"isMobile\"\n                :roomId=\"roomId\"\n                :roomState=\"roomState\"\n                :users=\"users\"\n                @createRoom=\"userCreateRoom\"\n                @joinRoom=\"userJoinRoom\"\n            />\n        </transition>\n\n        <div class=\"UIOverlay\">\n            <a href>About</a>\n            <button class=\"audio\" @click=\"toggleAudio()\" :class=\"[isAudioActive ? 'on' : 'off']\"/>\n        </div>\n\n        <DebugUIHelpers :users=\"users\" :roomState=\"roomState\"/>\n        <ThreeContainerDsk v-if=\"!isMobile\" :roomState=\"roomState\" :needsCamera=\"true\"/>\n        <ThreeContainerMob v-if=\"isMobile\" :roomState=\"roomState\" :character=\"myCharacter\"/>\n    </div>\n</template>\n\n<script>\nimport socket from \"./socket.js\"\nimport { bus } from \"@/main\"\nimport { findIp } from \"./utils\"\nimport { checkIfMobile } from \"./utils\"\nimport experienceSteps from \"../../server/experienceSteps.js\" // this is reference a file outside client folder, so it's the same as the server's\n\nimport DebugUIHelpers from \"./components/DebugUIHelpers\"\nimport ThreeContainerDsk from \"./components/ThreeContainer/ThreeContainerDsk.vue\"\nimport ThreeContainerMob from \"./components/ThreeContainer/ThreeContainerMob.vue\"\nimport { threeBus } from \"@/main\"\n\nexport default {\n    name: \"app\",\n    components: { DebugUIHelpers, ThreeContainerDsk, ThreeContainerMob },\n    data() {\n        return {\n            socket: socket,\n            roomState: {\n                currentStep: experienceSteps[0],\n                lamar: undefined,\n                zanit: undefined\n            },\n            users: Array(3),\n            myCharacter: null,\n            roomId: \"\",\n            isMobile: checkIfMobile(),\n            isAudioActive: true\n        }\n    },\n    mounted() {\n        // Listen for server events\n        socket.on(\"joined room\", this.showRoom)\n        socket.on(\"cant join room\", this.showCantJoin)\n        socket.on(\"update users\", users => this.setUsersData(users))\n        socket.on(\"set user room state\", newRoomState =>\n            this.setOwnState(newRoomState)\n        )\n\n        bus.$on(\"setRoomState\", this.setRoomState)\n    },\n    methods: {\n        userCreateRoom() {\n            socket.emit(\"create room\", this.$data.isMobile)\n        },\n        userJoinRoom(requestedRoom) {\n            socket.emit(\"join room\", {\n                isMobile: this.$data.isMobile,\n                requestedRoom\n            })\n        },\n        showRoom(roomId) {\n            this.$router.push({ name: \"room\" })\n            this.$data.roomId = roomId\n        },\n        showCantJoin(roomId) {\n            console.error(`La salle ${roomId} demandée n'existe pas`)\n        },\n        setRoomState(changedState) {\n            socket.emit(\"set server room state\", changedState)\n        },\n        setOwnState(roomState) {\n            this.$data.roomState = roomState\n        },\n        setUsersData(newUsers) {\n            this.$data.users = newUsers\n\n            if (typeof this.$data.users[0] !== \"undefined\") {\n                const user = this.$data.users.find(\n                    user => user.id === socket.id\n                )\n            }\n        },\n        toggleAudio() {\n            this.$data.isAudioActive = !this.$data.isAudioActive\n        }\n    },\n    watch: {\n        roomState: function(roomState) {\n            if (roomState.currentStep.name.slice(0, 4) === \"room\") {\n                this.$router.push({ name: \"room\" })\n            }\n            if (roomState.currentStep.name === \"selection_perso\") {\n                this.$router.push({ name: \"selectionPersos\" })\n            }\n            if (roomState.currentStep.name === \"dioramas\") {\n                this.$router.push({ name: \"dioramas\" })\n            }\n            if (roomState.currentStep.name === \"tuto_interactif\") {\n                this.$router.push({ name: \"tutoInteractif\" })\n            }\n            if (roomState.currentStep.name === \"trial_1_intro\") {\n                this.$router.push({ name: \"experience\" })\n            }\n        },\n        users: function() {\n            const user = this.$data.users.find(user => user.id === socket.id)\n            this.$data.myCharacter = user.character\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n// global styles are managed here :\n@import \"@/config/styles.scss\";\n\n* {\n    box-sizing: border-box;\n}\nhtml,\nbody {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n    color: $white;\n\n    #app {\n        font-family: \"Poppins\", Arial, Helvetica, sans-serif;\n        height: 100%;\n\n        .page {\n            // DECOMMENTER POUR ORBIT CONTROL\n            // pointer-events: none;\n            position: relative;\n            z-index: 10;\n            height: 100%;\n            padding: 50px;\n            & > button {\n                pointer-events: auto;\n            }\n        }\n\n        .UIOverlay {\n            position: absolute;\n            right: 30px;\n            top: 30px;\n            z-index: 10;\n\n            button.audio {\n                pointer-events: auto;\n                background-size: contain;\n                background-position: center;\n                background-repeat: no-repeat;\n                width: 30px;\n                height: 10px;\n                margin-left: 20px;\n                transition: filter 0.25s ease, background-image 0.25s ease;\n\n                &:hover {\n                    @extend .svgGlow;\n                }\n\n                &.on {\n                    background-image: url(\"/assets/img/sound-on.svg\");\n                }\n\n                &.off {\n                    background-image: url(\"/assets/img/sound-off.svg\");\n                }\n\n                img {\n                    display: block;\n                }\n            }\n        }\n\n        /* *** *** *** *** *** PAGES TRANSITIONS *** *** *** *** *** */\n        .fade-leave-active {\n            // position: absolute;\n            transition: opacity 0.4s;\n        }\n        .fade-leave-to {\n            opacity: 0;\n        }\n        .fade-enter-active {\n            transition: opacity 0.5s;\n            transition-delay: 0.4s;\n        }\n        .fade-enter {\n            opacity: 0;\n        }\n    }\n}\n</style>\n"]}]}